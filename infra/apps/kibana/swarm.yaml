version: '3.8'
services:
  kibana-setup:
    image: ${KIBANA_IMAGE:-docker.elastic.co/kibana/kibana:7.14.0}
    user: root
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=https://es01:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - KIBANA_PASSWORD=${KIBANA_ADMIN_PASSWORD?KIBANA_ADMIN_PASSWORD not set}
      - ELASTICSEARCH_PASSWORD=${KIBANA_ELASTIC_PASSWORD?KIBANA_ELASTIC_PASSWORD not set}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
    command: >
      bash -c '
        set -e
        echo "Waiting for Elasticsearch to start up before bootstrapping Kibana."
        while true; do
          response=$$(
            curl -s -k -w "%{http_code}" \
              --cacert /usr/share/kibana/config/certs/ca/ca.crt \
              -u "$${ELASTICSEARCH_USERNAME}:$${ELASTICSEARCH_PASSWORD}" \
              -H "Content-Type: application/json" \
              -X GET "https://es01:9200/_cluster/health"
          )
          if [ "$${response: -3}" = "200" ]; then
            break
          fi
          echo "Retrying Elasticsearch connection... last status code was $${response: -3}"
          sleep 10;
        done
        

        echo "Setting kibana_system password";
        while true; do
          response=$$(
            curl -s -k -w "%{http_code}" \
              --cacert /usr/share/kibana/config/certs/ca/ca.crt \
              -u "$${ELASTICSEARCH_USERNAME}:$${ELASTICSEARCH_PASSWORD}" \
              -H "Content-Type: application/json" \
              -X POST "https://es01:9200/_security/user/$${ELASTICSEARCH_USERNAME}/_password" \
              -d "{\"password\":\"$${KIBANA_PASSWORD}\"}"
          )
          if [ "$${response: -3}" = "200" ]; then
            break
          fi
          echo "Retrying set password for $${ELASTICSEARCH_USERNAME}, last status code was $${response: -3}"
          sleep 10;
        done  

        echo "Kibana password set for user $${ELASTICSEARCH_USERNAME}:$${KIBANA_PASSWORD}"; 
        echo "Tring authenticate with kibana user"
        while true; do
          response=$$(
            curl -s -k -w "%{http_code}" \
              --cacert /usr/share/kibana/config/certs/ca/ca.crt \
              -u "$${ELASTICSEARCH_USERNAME}:$${KIBANA_PASSWORD}" \
              -H "Content-Type: application/json" \
              -X GET "https://es01:9200/_cluster/health"
          )
          if [ "$${response: -3}" = "200" ]; then
            break
          fi
          echo "Retrying authenticate with kibana user, last status code was $${response: -3}"
          sleep 10;
        done
        

        # /usr/share/kibana/bin/kibana-keystore create;
        # echo "$${KIBANA_ELASTIC_PASSWORD}" | /usr/share/kibana/bin/kibana-keystore add --stdin "elasticsearch.# password";
        # echo "$${KIBANA_PASSWORD}" | /usr/share/kibana/bin/kibana-keystore add --stdin "kibana.password";
        # echo "Setting up kibana index pattern";

        # ./bin/kibana-plugin install
      '
    networks:
      - elastic
      - tenant
      - edge
    volumes:
      - kibana-data:/kibana/data
      - elastic-certs:/usr/share/kibana/config/certs
    deploy:
      restart_policy:
        condition: none
      placement:
        constraints:
          - node.role == manager
  
  kibana:
    image: ${KIBANA_IMAGE:-docker.elastic.co/kibana/kibana:7.14.0}
    environment:
      - SERVER_NAME=${KIBANA_PROXY_HOST?KIBANA_PROXY_HOST not set}
      # - SERVER_BASEPATH=/
      - ELASTICSEARCH_HOSTS=["https://es01:9200","https://es02:9200","https://es03:9200"]
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_ADMIN_PASSWORD?KIBANA_ADMIN_PASSWORD not set}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
    depends_on:
      - kibana-setup
    networks:
      - elastic
      - tenant
      - edge
    volumes:
      - kibana-data:/kibana/data
      - elastic-certs:/usr/share/kibana/config/certs
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        max_attempts: 3
        window: 120s      
      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=${HOST_EDGE_NETWORK?HOST_EDGE_NETWORK not set}"
        - "traefik.http.routers.kibana.rule=Host(`${KIBANA_PROXY_HOST?KIBANA_PROXY_HOST not set}`)"
        # - "traefik.http.middlewares.kibana-strip.stripprefix.prefixes=${KIBANA_PROXY_PATH?KIBANA_PROXY_PATH not set}" 
        # - "traefik.http.routers.kibana.middlewares=kibana-strip"
        - "traefik.http.routers.kibana.entrypoints=websecure"
        - "traefik.http.services.kibana.loadbalancer.server.port=5601"
        - "traefik.http.routers.kibana.tls=true"
        - "traefik.http.routers.kibana.tls.certresolver=letsencrypt"
        # - "traefik.http.middlewares.kibana.headers.SSLRedirect=true"
        # - "traefik.http.middlewares.kibana.headers.STSSeconds=315360000"
        # - "traefik.http.middlewares.kibana.headers.browserXSSFilter=true"
        # - "traefik.http.middlewares.kibana.headers.contentTypeNosniff=true"
        # - "traefik.http.middlewares.kibana.headers.forceSTSHeader=true"
        # - "traefik.http.middlewares.kibana.headers.SSLHost=${KIBANA_PROXY_HOST?KIBANA_PROXY_HOST not set}"
        # - "traefik.http.middlewares.kibana.headers.STSIncludeSubdomains=true"
        # - "traefik.http.middlewares.kibana.headers.STSPreload=true"

volumes:
  kibana-data:
    name: ${SERVICE_VOLUME_NAME?SERVICE_VOLUME_NAME not set}
  elastic-certs: 
    name: ${SERVICE_NAMESPACE?SERVICE_NAMESPACE not set}-elastic-certs
    external: true

networks:
  elastic:
    name: ${SERVICE_NAMESPACE?SERVICE_NAMESPACE not set}-elastic  
  tenant:
    name: ${TENANT_NETWORK_NAME?Tenanat name not set}
    external: true
  edge:
    name: ${HOST_EDGE_NETWORK?HOST_EDGE_NETWORK not set}
    external: true