version: '3.8'
services:
  supabase-studio:
    image: supabase/studio:20230803-15c6762
    healthcheck:
      test:
        [
          "CMD",
          "node",
          "-e",
          "require('http').get('http://localhost:3000/api/profile', (r) => {if (r.statusCode !== 200) throw new Error(r.statusCode)})"
        ]
      timeout: 5s
      interval: 5s
      retries: 3
    networks:
      - supabase
      - edge
    environment:
      STUDIO_PG_META_URL: http://supabase-meta:8080
      POSTGRES_PASSWORD: ${SUPABASE_POSTGRES_PASSWORD}
      DEFAULT_ORGANIZATION_NAME: ${SUPABASE_STUDIO_DEFAULT_ORGANIZATION}
      DEFAULT_PROJECT_NAME: ${SUPABASE_STUDIO_DEFAULT_PROJECT}
      SUPABASE_URL: http://supabase-kong:8000
      SUPABASE_PUBLIC_URL: ${SUPABASE_PUBLIC_URL?SUPABASE_PUBLIC_URL not set}
      SUPABASE_ANON_KEY: ${SUPABASE_ANON_KEY}
      SUPABASE_SERVICE_KEY: ${SUPABASE_SERVICE_ROLE_KEY}
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: none
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.supabase-studio.rule=Host(`${SUPABASE_PROXY_HOST?SUPABASE_PROXY_HOST not set}`) && PathPrefix(`/studio`)"
        - "traefik.http.routers.supabase-studio.entrypoints=https"
        - "traefik.http.routers.supabase-studio.service=supabase-studio"
        - "traefik.http.services.supabase-studio.loadbalancer.server.port=3000"
  supabase-kong:
    image: kong:2.8.1
    entrypoint: bash -c 'eval "echo \"$$(cat ~/temp.yml)\"" > ~/kong.yml && /docker-entrypoint.sh kong docker-start'
    networks:
      - supabase
      - edge
    ports:
      - ${SUPABASE_KONG_HTTP_PORT?SUPABASE_KONG_HTTP_PORT not set}:8000/tcp
      - ${SUPABASE_KONG_HTTPS_PORT?SUPABASE_KONG_HTTPS_PORT not set}:8443/tcp
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /home/kong/kong.yml
      KONG_DNS_ORDER: LAST,A,CNAME
      KONG_PLUGINS: request-transformer,cors,key-auth,acl,basic-auth
      KONG_NGINX_PROXY_PROXY_BUFFER_SIZE: 160k
      KONG_NGINX_PROXY_PROXY_BUFFERS: 64 160k
      SUPABASE_ANON_KEY: ${SUPABASE_ANON_KEY?SUPABASE_ANON_KEY not set}
      SUPABASE_SERVICE_KEY: ${SUPABASE_SERVICE_ROLE_KEY?SUPABASE_SERVICE_ROLE_KEY not set}
      DASHBOARD_USERNAME: ${SUPABASE_DASHBOARD_USERNAME?SUPABASE_DASHBOARD_USERNAME not set}
      DASHBOARD_PASSWORD: ${SUPABASE_DASHBOARD_PASSWORD?SUPABASE_DASHBOARD_PASSWORD not set}
    volumes:
      - ${SERVICE_VOLUME_PATH}/api/kong.yml:/home/kong/temp.yml:ro
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: none
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.supabase-kong.rule=Host(`${SUPABASE_PROXY_HOST?SUPABASE_PROXY_HOST not set}`)"
        - "traefik.http.routers.supabase-kong.entrypoints=https"
        - "traefik.http.routers.supabase-kong.service=supabase-kong"
        - "traefik.http.services.supabase-kong.loadbalancer.server.port=8000"
        # - "traefik.http.routers.kong-https.rule=Host(`${SUPABASE_PROXY_HOST?SUPABASE_PROXY_HOST not set}`)"
        # - "traefik.http.routers.kong-https.entrypoints=https"
        # - "traefik.http.routers.kong-https.service=kong"
        # - "traefik.http.services.kong-https.loadbalancer.server.port=8443"
  supabase-auth:
    image: supabase/gotrue:v2.82.4
    depends_on:
      - supabase-db
      # - supabase-analytics
    networks:
      - supabase
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:9999/health"
        ]
      timeout: 5s
      interval: 5s
      retries: 3
    environment:
      GOTRUE_API_HOST: 0.0.0.0
      GOTRUE_API_PORT: 9999
      API_EXTERNAL_URL: ${SUPABASE_API_EXTERNAL_URL?SUPABASE_API_EXTERNAL_URL not set}

      GOTRUE_DB_DRIVER: postgres
      GOTRUE_DB_DATABASE_URL: postgres://${SUPABASE_POSTGRES_USER}:${SUPABASE_POSTGRES_PASSWORD}@${SUPABASE_POSTGRES_HOST}:${SUPABASE_POSTGRES_PORT}/${SUPABASE_POSTGRES_DB}

      GOTRUE_SITE_URL: ${SUPABASE_SITE_URL?SUPABASE_SITE_URL not set}
      GOTRUE_URI_ALLOW_LIST: ${SUPABASE_ADDITIONAL_REDIRECT_URLS?SUPABASE_ADDITIONAL_REDIRECT_URLS not set}
      GOTRUE_DISABLE_SIGNUP: ${SUPABASE_DISABLE_SIGNUP?SUPABASE_DISABLE_SIGNUP not set}

      GOTRUE_JWT_ADMIN_ROLES: service_role
      GOTRUE_JWT_AUD: authenticated
      GOTRUE_JWT_DEFAULT_GROUP_NAME: authenticated
      GOTRUE_JWT_EXP: ${SUPABASE_JWT_EXPIRY}
      GOTRUE_JWT_SECRET: ${SUPABASE_JWT_SECRET}

      GOTRUE_EXTERNAL_EMAIL_ENABLED: ${SUPABASE_ENABLE_EMAIL_SIGNUP}
      GOTRUE_MAILER_AUTOCONFIRM: ${SUPABASE_ENABLE_EMAIL_AUTOCONFIRM}
      # GOTRUE_MAILER_SECURE_EMAIL_CHANGE_ENABLED: true
      # GOTRUE_SMTP_MAX_FREQUENCY: 1s
      GOTRUE_SMTP_ADMIN_EMAIL: ${SUPABASE_SMTP_ADMIN_EMAIL}
      GOTRUE_SMTP_HOST: ${SUPABASE_SMTP_HOST}
      GOTRUE_SMTP_PORT: ${SUPABASE_SMTP_PORT}
      GOTRUE_SMTP_USER: ${SUPABASE_SMTP_USER}
      GOTRUE_SMTP_PASS: ${SUPABASE_SMTP_PASS}
      GOTRUE_SMTP_SENDER_NAME: ${SUPABASE_SMTP_SENDER_NAME}
      GOTRUE_MAILER_URLPATHS_INVITE: ${SUPABASE_MAILER_URLPATHS_INVITE}
      GOTRUE_MAILER_URLPATHS_CONFIRMATION: ${SUPABASE_MAILER_URLPATHS_CONFIRMATION}
      GOTRUE_MAILER_URLPATHS_RECOVERY: ${SUPABASE_MAILER_URLPATHS_RECOVERY}
      GOTRUE_MAILER_URLPATHS_EMAIL_CHANGE: ${SUPABASE_MAILER_URLPATHS_EMAIL_CHANGE}

      GOTRUE_EXTERNAL_PHONE_ENABLED: ${SUPABASE_ENABLE_PHONE_SIGNUP}
      GOTRUE_SMS_AUTOCONFIRM: ${SUPABASE_ENABLE_PHONE_AUTOCONFIRM}
      MFA_ENABLED: ${SUPABASE_MFA_ENABLED}
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: none
  supabase-rest:
    image: postgrest/postgrest:v11.1.0
    depends_on:
      - supabase-db
      # - supabase-analyticsd
    networks:
      - supabase
    environment:
      PGRST_DB_URI: postgres://${SUPABASE_POSTGRES_USER}:${SUPABASE_POSTGRES_PASSWORD}@${SUPABASE_POSTGRES_HOST}:${SUPABASE_POSTGRES_PORT}/${SUPABASE_POSTGRES_DB}
      PGRST_DB_SCHEMAS: ${SUPABASE_PGRST_DB_SCHEMAS?SUPABASE_PGRST_DB_SCHEMAS not set}
      PGRST_DB_ANON_ROLE: anon
      PGRST_JWT_SECRET: ${SUPABASE_JWT_SECRET?SUPABASE_JWT_SECRET not set}
      PGRST_DB_USE_LEGACY_GUCS: "false"
      PGRST_APP_SETTINGS_JWT_SECRET: ${SUPABASE_JWT_SECRET?SUPABASE_JWT_SECRET not set}
      PGRST_APP_SETTINGS_JWT_EXP: ${SUPABASE_JWT_EXPIRY?SUPABASE_JWT_EXPIRY not set}
    command: "postgrest"
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: none
  supabase-realtime:
    image: supabase/realtime:v2.10.1
    depends_on:
      - supabase-db
      # - supabase-analytics
    networks:
      - supabase
    healthcheck:
      test:
        [
          "CMD",
          "bash",
          "-c",
          "printf \\0 > /dev/tcp/localhost/4000"
        ]
      timeout: 5s
      interval: 5s
      retries: 3
    environment:
      PORT: 4000
      DB_HOST: ${SUPABASE_POSTGRES_HOST?SUPABASE_POSTGRES_HOST not set}
      DB_PORT: ${SUPABASE_POSTGRES_PORT?SUPABASE_POSTGRES_PORT not set}
      DB_USER: ${SUPABASE_POSTGRES_USER?SUPABASE_POSTGRES_USER not set}
      DB_PASSWORD: ${SUPABASE_POSTGRES_PASSWORD?SUPABASE_POSTGRES_PASSWORD not set}
      DB_NAME: ${SUPABASE_POSTGRES_DB}
      DB_AFTER_CONNECT_QUERY: 'SET search_path TO _realtime'
      DB_ENC_KEY: supabaserealtime
      API_JWT_SECRET: ${SUPABASE_JWT_SECRET?SUPABASE_JWT_SECRET not set}
      FLY_ALLOC_ID: fly123
      FLY_APP_NAME: realtime
      SECRET_KEY_BASE: ${SUPABASE_SECRET_KEY_BASE?SUPABASE_SECRET_KEY_BASE not set}
      ERL_AFLAGS: -proto_dist inet_tcp
      ENABLE_TAILSCALE: "false"
      DNS_NODES: "''"
    command: >
      sh -c "/app/bin/migrate && /app/bin/realtime eval 'Realtime.Release.seeds(Realtime.Repo)' && /app/bin/server"
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: none
  supabase-storage:
    image: supabase/storage-api:v0.40.4
    depends_on:
      - supabase-db
      - supabase-rest
      - supabase-imgproxy
    networks:
      - supabase
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:5000/status"
        ]
      timeout: 5s
      interval: 5s
      retries: 3
    environment:
      ANON_KEY: ${SUPABASE_ANON_KEY?SUPABASE_ANON_KEY not set}
      SERVICE_KEY: ${SUPABASE_SERVICE_ROLE_KEY?SUPABASE_SERVICE_ROLE_KEY not set}
      POSTGREST_URL: http://supabase-rest:3000
      PGRST_JWT_SECRET: ${SUPABASE_JWT_SECRET?SUPABASE_JWT_SECRET not set}
      DATABASE_URL: postgres://${SUPABASE_POSTGRES_USER}:${SUPABASE_POSTGRES_PASSWORD}@${SUPABASE_POSTGRES_HOST}:${SUPABASE_POSTGRES_PORT}/${SUPABASE_POSTGRES_DB}
      FILE_SIZE_LIMIT: 52428800
      STORAGE_BACKEND: file
      FILE_STORAGE_BACKEND_PATH: /var/lib/storage
      TENANT_ID: stub
      REGION: stub
      GLOBAL_S3_BUCKET: stub
      ENABLE_IMAGE_TRANSFORMATION: "true"
      IMGPROXY_URL: http://supabase-imgproxy:5001
    volumes:
      - supabase-storage:/var/lib/storage:z
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: none
  supabase-imgproxy:
    image: darthsim/imgproxy:v3.8.0
    networks:
      - supabase
    healthcheck:
      test: [ "CMD", "imgproxy", "health" ]
      timeout: 5s
      interval: 5s
      retries: 3
    environment:
      IMGPROXY_BIND: ":5001"
      IMGPROXY_LOCAL_FILESYSTEM_ROOT: /
      IMGPROXY_USE_ETAG: "true"
      IMGPROXY_ENABLE_WEBP_DETECTION: ${SUPABASE_IMGPROXY_ENABLE_WEBP_DETECTION?SUPABASE_IMGPROXY_ENABLE_WEBP_DETECTION not set}
    volumes:
      - supabase-storage:/var/lib/storage:z
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: none
  supabase-meta:
    image: supabase/postgres-meta:v0.68.0
    depends_on:
      - supabase-db
      # - supabase-analytics
    networks:
      - supabase
    environment:
      PG_META_PORT: 8080
      PG_META_DB_HOST: ${SUPABASE_POSTGRES_HOST?SUPABASE_POSTGRES_HOST not set}
      PG_META_DB_PORT: ${SUPABASE_POSTGRES_PORT?SUPABASE_POSTGRES_PORT not set}
      PG_META_DB_NAME: ${SUPABASE_POSTGRES_DB?SUPABASE_POSTGRES_DB not set}
      PG_META_DB_USER: ${SUPABASE_POSTGRES_USER?SUPABASE_POSTGRES_USER not set}
      PG_META_DB_PASSWORD: ${SUPABASE_POSTGRES_PASSWORD?SUPABASE_POSTGRES_PASSWORD not set}
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: none
  supabase-functions:
    image: supabase/edge-runtime:v1.13.1
    # depends_on:
      # - supabase-analytics
    networks:
      - supabase
    environment:
      JWT_SECRET: ${SUPABASE_JWT_SECRET?SUPABASE_JWT_SECRET not set}
      SUPABASE_URL: http://supabase-kong:8000
      SUPABASE_ANON_KEY: ${SUPABASE_ANON_KEY?SUPABASE_ANON_KEY not set}
      SUPABASE_SERVICE_ROLE_KEY: ${SUPABASE_SERVICE_ROLE_KEY?SUPABASE_SERVICE_ROLE_KEY not set}
      SUPABASE_DB_URL: postgresql://${SUPABASE_POSTGRES_USER}:${SUPABASE_POSTGRES_PASSWORD}@{SUPABASE_POSTGRES_DB}:${SUPABASE_POSTGRES_PORT}/${SUPABASE_POSTGRES_DB}
      # TODO: Allow configuring VERIFY_JWT per function. This PR might help: https://github.com/supabase/cli/pull/786
      VERIFY_JWT: "${SUPABASE_FUNCTIONS_VERIFY_JWT?SUPABASE_FUNCTIONS_VERIFY_JWT not set}"
    volumes:
      - ${SERVICE_VOLUME_PATH}/functions:/home/deno/functions:Z
    command:
      - start
      - --main-service
      - /home/deno/functions/main
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: none
  supabase-db:
    image: docker.io/supabase/postgres:15.1.0.103
    environment:
      POSTGRES_HOST: /var/run/postgresql
      PGPORT: ${SUPABASE_POSTGRES_PORT?SUPABASE_POSTGRES_PORT not set}
      POSTGRES_PORT: ${SUPABASE_POSTGRES_PORT?SUPABASE_POSTGRES_PORT not set}
      PGPASSWORD: ${SUPABASE_POSTGRES_PASSWORD?SUPABASE_POSTGRES_PASSWORD not set}
      POSTGRES_PASSWORD: ${SUPABASE_POSTGRES_PASSWORD?SUPABASE_POSTGRES_PASSWORD not set}
      PGDATABASE: ${SUPABASE_POSTGRES_DB?SUPABASE_POSTGRES_DB not set}
      POSTGRES_DB: ${SUPABASE_POSTGRES_DB?SUPABASE_POSTGRES_DB not set}
      PGUSER: ${SUPABASE_POSTGRES_USER?SUPABASE_POSTGRES_USER not set}
      POSTGRES_USER: ${SUPABASE_POSTGRES_USER?SUPABASE_POSTGRES_USER not set}
    command:
        - postgres
        - -c
        - config_file=/etc/postgresql/postgresql.conf
        - -c
        - log_min_messages=fatal
    networks:
      - supabase
    healthcheck:
      test: pg_isready -U postgres -h localhost
      interval: 5s
      timeout: 5s
      retries: 10
    # depends_on:
    #   - supabase-vector
    volumes:
      - supabase-db:/var/lib/postgresql/data
      # - ${SERVICE_VOLUME_PATH}/logs/postgresql.conf:/etc/postgresql/postgresql.conf:Z
      - ${SERVICE_VOLUME_PATH?SERVICE_VOLUME_PATH not set}/db/realtime.sql:/docker-entrypoint-initdb.d/migrations/99-realtime.sql:Z
      - ${SERVICE_VOLUME_PATH}/db/webhooks.sql:/docker-entrypoint-initdb.d/migrations/98-webhooks.sql:Z
      - ${SERVICE_VOLUME_PATH}/db/roles.sql:/docker-entrypoint-initdb.d/migrations/99-roles.sql:Z
      - ${SERVICE_VOLUME_PATH}/db/logs.sql:/docker-entrypoint-initdb.d/migrations/99-logs.sql:Z
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: none
  
  
  # supabase-analytics:
  #   image: supabase/logflare:1.4.0
  #   entrypoint: |
  #     sh -c `cat <<'EOF' > run.sh && sh run.sh
  #     ./logflare eval Logflare.Release.migrate
  #     ./logflare start --sname logflare
  #     EOF
  #     `
  #   healthcheck:
  #     test: [ "CMD", "curl", "http://localhost:4000/health" ]
  #     timeout: 5s
  #     interval: 5s
  #     retries: 10
  #   restart: unless-stopped
  #   depends_on:
  #     - supabase-db
  #   environment:
  #     LOGFLARE_NODE_HOST:  127.0.0.1
  #     DB_USERNAME: ${SUPABASE_POSTGRES_USER?SUPABASE_POSTGRES_USER not set}
  #     DB_DATABASE: ${SUPABASE_POSTGRES_DB?SUPABASE_POSTGRES_DB not set}
  #     DB_HOSTNAME: ${SUPABASE_POSTGRES_HOST?SUPABASE_POSTGRES_HOST not set}
  #     DB_PORT: ${SUPABASE_POSTGRES_PORT?SUPABASE_POSTGRES_PORT not set}
  #     DB_PASSWORD: ${SUPABASE_POSTGRES_PASSWORD?SUPABASE_POSTGRES_PASSWORD not set}
  #     DB_SCHEMA: _analytics
  #     LOGFLARE_API_KEY: ${SUPABASE_LOGFLARE_API_KEY?SUPABASE_LOGFLARE_API_KEY not set}
  #     LOGFLARE_SINGLE_TENANT: true
  #     LOGFLARE_SUPABASE_MODE: true
  #     LOGFLARE_MIN_CLUSTER_SIZE: 1
  #     RELEASE_COOKIE: cookie
  #     POSTGRES_BACKEND_URL: postgresql://${SUPABASE_POSTGRES_USER}:${SUPABASE_POSTGRES_PASSWORD}@${SUPABASE_POSTGRES_HOST}:${SUPABASE_POSTGRES_PORT}/${SUPABASE_POSTGRES_DB}
  #     POSTGRES_BACKEND_SCHEMA: _analytics
  #     LOGFLARE_FEATURE_FLAG_OVERRIDE: multibackend=true
  
  
  # supabase-vector:
  #   image: docker.io/timberio/vector:0.28.1-alpine
  #   command: [ "--config", "etc/vector/vector.yml" ]
  #   healthcheck:
  #     test:
  #       [
  #         "CMD",
  #         "wget",
  #         "--no-verbose",
  #         "--tries=1",
  #         "--spider",
  #         "http://vector:9001/health"
  #       ]
  #     timeout: 5s
  #     interval: 5s
  #     retries: 3
  #   volumes:
  #     - ${SERVICE_VOLUME_PATH?SERVICE_VOLUME_PATH not set}/logs/vector.yml:/etc/vector/vector.yml:ro
  #     - ${SUPABASE_DOCKER_SOCKET_LOCATION?SUPABASE_DOCKER_SOCKET_LOCATION not set}:/var/run/docker.sock:ro
  #   deploy:
  #     mode: replicated
  #     replicas: 1
  #     placement:
  #       constraints:
  #         - node.role == manager
  #     restart_policy:
  #       condition: on-failure

    
volumes:
  supabase-storage:
  supabase-db:
  
networks:
  supabase:
    name: ${TENANT_NAME?Tenanat network name not set}_supabase
  tenant:
    name: ${TENANT_NAME?Tenanat network name not set}_tenant
    external: true
  edge:
    name: ${EDGE_NETWORK_NAME?EDGE_NETWORK_NAME not set}
    external: true